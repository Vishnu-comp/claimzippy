File: src/App.js
import React, { useEffect, useState } from 'react';
import Header from './components/Header';
import Content from './components/Content';
import AQI from './components/AQI';
import Footer from './components/Footer';
import data from './data.json';
import './styles.css';

const App = () => {
  const [content, setContent] = useState([]);

  useEffect(() => {
    setContent(data.sections);
  }, []);

  return (
    <div>
      <Header />
      <Content data={content} />
      <AQI />
      <Footer />
    </div>
  );
};

export default App;


File: src/App.test.js
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


File: components/AQI.js
import React, { useState } from 'react';
import axios from 'axios';

const AQI = () => {
  const [city, setCity] = useState('');
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const API_KEY = '699cab3ee3eb1f353d0a18c0b5c96c9e7d77425f';

  const getAQIIcon = (aqi) => {
    if (aqi <= 50) return 'ðŸŸ¢'; // Good (green)
    if (aqi <= 100) return 'ðŸŸ¡'; // Moderate (yellow)
    if (aqi <= 150) return 'ðŸŸ '; // Unhealthy for sensitive (orange)
    if (aqi <= 200) return 'ðŸ”´'; // Unhealthy (red)
    if (aqi <= 300) return 'ðŸŸ£'; // Very unhealthy (purple)
    return 'âš«'; // Hazardous (black)
  };

  const handleSearch = async () => {
    if (city.trim() === '') {
      alert('Please enter a city name.');
      return;
    }

    setLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await axios.get(
        `https://api.waqi.info/feed/${city}/?token=${API_KEY}`
      );
      if (response.data.status === 'ok') {
        const data = response.data.data;
        setResult({
          aqi: data.aqi,
          city: data.city.name,
          time: data.time.s,
        });
      } else {
        setError('City not found or API error. Please try again.');
      }
    } catch (err) {
      setError('Unable to fetch data. Please check the city name or try again later.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <section className="aqi-section">
      <h2>Air Quality Index (AQI)</h2>
      <div className="aqi-form">
        <input
          type="text"
          placeholder="Enter city name"
          value={city}
          onChange={(e) => setCity(e.target.value)}
        />
        <button onClick={handleSearch} disabled={loading}>
          {loading ? 'Loading...' : 'Check Air Quality'}
        </button>
      </div>
      {error && <p style={{ color: 'red', marginTop: '1em' }}>{error}</p>}
      {result && (
        <div style={{ marginTop: '1em' }}>
          <p><strong>City:</strong> {result.city}</p>
          <p><strong>AQI:</strong> {result.aqi} {getAQIIcon(result.aqi)}</p>
          <p><strong>Last Updated:</strong> {result.time}</p>
        </div>
      )}
    </section>
  );
};

export default AQI;


File: components/Content.js
import React from 'react';

const Content = ({ data }) => (
  <main>
    {data.map((section, index) => (
      <section id={section.title.toLowerCase().replace(' ', '-')} key={index}>
        <h2>{section.title}</h2>
        <ul>
          {section.content.split('\n').map((line, i) => {
            // Check if the line starts with a bullet point
            if (line.trim().startsWith('-')) {
              return <li key={i}>{line.trim().slice(1).trim()}</li>; // Remove the leading '-'
            }
            return <p key={i}>{line}</p>;
          })}
        </ul>
      </section>
    ))}
  </main>
);

export default Content;


File: components/Footer.js
import React from 'react';

const Footer = () => (
  <footer>
    <p>Â© 2024 Air Pollution Awareness</p>
  </footer>
);

export default Footer;


File: components/Header.js
import React from 'react';

const Header = () => (
  <header>
    <h1>Air Pollution Awareness</h1>
    <p>Learn about air pollution and how it affects the world around us.</p>
    <nav>
      <a href="#introduction">Introduction</a>
      <a href="#causes">Causes</a>
      <a href="#effects">Effects</a>
      <a href="#solutions">Solutions</a>
      <a href="#statistics">Global Statistics</a>
      <a href="#check-aqi">Check AQI</a>
    </nav>
  </header>
);

export default Header;


File: src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


File: src/reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


File: src/setupTests.js
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


